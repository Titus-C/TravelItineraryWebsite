@page "/accomodations/delete"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Accomodation</h2>
    <hr />
    @if (accomodation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">AccomodationName</dt>
            <dd class="col-sm-10">@accomodation.AccomodationName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AccomodationAddress</dt>
            <dd class="col-sm-10">@accomodation.AccomodationAddress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">AccomodationCost</dt>
            <dd class="col-sm-10">@accomodation.AccomodationCost</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ItineraryDetailId</dt>
            <dd class="col-sm-10">@accomodation.ItineraryDetailId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@accomodation.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@accomodation.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@accomodation.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@accomodation.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="accomodation" OnValidSubmit="DeleteAccomodation" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(accomodation is null)">Delete</button> |
            <a href="/accomodations">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Accomodation? accomodation;

    [SupplyParameterFromQuery]
    private int AccomodationId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        accomodation = await context.Accomodation.FirstOrDefaultAsync(m => m.AccomodationId == AccomodationId);

        if (accomodation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteAccomodation()
    {
        using var context = DbFactory.CreateDbContext();
        context.Accomodation.Remove(accomodation!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/accomodations");
    }
}
