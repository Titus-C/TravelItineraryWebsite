@page "/activities/delete"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Activity</h2>
    <hr />
    @if (activity is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">ActivityName</dt>
            <dd class="col-sm-10">@activity.ActivityName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ActivityDescription</dt>
            <dd class="col-sm-10">@activity.ActivityDescription</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ActivityAddress</dt>
            <dd class="col-sm-10">@activity.ActivityAddress</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ItineraryDetailId</dt>
            <dd class="col-sm-10">@activity.ItineraryDetailId</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@activity.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@activity.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@activity.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@activity.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="activity" OnValidSubmit="DeleteActivity" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(activity is null)">Delete</button> |
            <a href="/activities">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Activity? activity;

    [SupplyParameterFromQuery]
    private int ActivityId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        activity = await context.Activity.FirstOrDefaultAsync(m => m.ActivityId == ActivityId);

        if (activity is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteActivity()
    {
        using var context = DbFactory.CreateDbContext();
        context.Activity.Remove(activity!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/activities");
    }
}
