@page "/expenses/delete"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <hr />
    @if (expense is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@expense.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Amount</dt>
            <dd class="col-sm-10">@expense.Amount</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Category</dt>
            <dd class="col-sm-10">@expense.Category</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date</dt>
            <dd class="col-sm-10">@expense.Date</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@expense.DateCreated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@expense.DateUpdated</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@expense.CreatedBy</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@expense.UpdatedBy</dd>
        </dl>
        <EditForm method="post" Model="expense" OnValidSubmit="DeleteExpense" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(expense is null)">Delete</button> |
            <a href="/expenses" class="btn btn-outline-dark">Cancel</a>
        </EditForm>
    }
</div>

@code {
    private Expense? expense;

    [SupplyParameterFromQuery]
    private int ExpenseId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        expense = await context.Expense.FirstOrDefaultAsync(m => m.ExpenseId == ExpenseId);

        if (expense is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteExpense()
    {
        using var context = DbFactory.CreateDbContext();
        context.Expense.Remove(expense!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/expenses");
    }
}
