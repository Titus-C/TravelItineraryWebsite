@page "/guides/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Guide</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Guide" OnValidSubmit="AddGuide" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label> 
                <InputText id="name" @bind-Value="Guide.Name" class="form-control" /> 
                <ValidationMessage For="() => Guide.Name" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Guide.Description" class="form-control" /> 
                <ValidationMessage For="() => Guide.Description" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="views" class="form-label">Views:</label> 
                <InputNumber id="views" @bind-Value="Guide.Views" class="form-control" /> 
                <ValidationMessage For="() => Guide.Views" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="saves" class="form-label">Saves:</label> 
                <InputNumber id="saves" @bind-Value="Guide.Saves" class="form-control" /> 
                <ValidationMessage For="() => Guide.Saves" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="itineraryid" class="form-label">ItineraryId:</label> 
                <InputNumber id="itineraryid" @bind-Value="Guide.ItineraryId" class="form-control" /> 
                <ValidationMessage For="() => Guide.ItineraryId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Guide.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Guide.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Guide.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Guide.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Guide.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Guide.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Guide.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Guide.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/guides">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Guide Guide { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddGuide()
    {
        using var context = DbFactory.CreateDbContext();
        context.Guide.Add(Guide);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/guides");
    }
}
