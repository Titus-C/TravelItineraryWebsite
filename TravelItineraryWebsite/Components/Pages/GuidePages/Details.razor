@page "/guides/details"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Guide</h2>
    <hr />
    @if (guide is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@guide.Name</dd>
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@guide.Description</dd>
            <dt class="col-sm-2">Views</dt>
            <dd class="col-sm-10">@guide.Views</dd>
            <dt class="col-sm-2">Saves</dt>
            <dd class="col-sm-10">@guide.Saves</dd>
            <dt class="col-sm-2">ItineraryId</dt>
            <dd class="col-sm-10">@guide.ItineraryId</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@guide.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@guide.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@guide.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@guide.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/guides/edit?guideid={guide.GuideId}")">Edit</a> |
            <a href="@($"/guides")">Back to List</a>
        </div>
    }
</div>

@code {
    private Guide? guide;

    [SupplyParameterFromQuery]
    private int GuideId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        guide = await context.Guide.FirstOrDefaultAsync(m => m.GuideId == GuideId);

        if (guide is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
