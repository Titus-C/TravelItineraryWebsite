@page "/transports/details"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Transport</h2>
    <hr />
    @if (transport is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">TransportName</dt>
            <dd class="col-sm-10">@transport.TransportName</dd>
            <dt class="col-sm-2">TransportDuration</dt>
            <dd class="col-sm-10">@transport.TransportDuration</dd>
            <dt class="col-sm-2">TransportDepartureTime</dt>
            <dd class="col-sm-10">@transport.TransportDepartureTime</dd>
            <dt class="col-sm-2">TransportArrivalTime</dt>
            <dd class="col-sm-10">@transport.TransportArrivalTime</dd>
            <dt class="col-sm-2">ItineraryDetailId</dt>
            <dd class="col-sm-10">@transport.ItineraryDetailId</dd>
            <dt class="col-sm-2">DateCreated</dt>
            <dd class="col-sm-10">@transport.DateCreated</dd>
            <dt class="col-sm-2">DateUpdated</dt>
            <dd class="col-sm-10">@transport.DateUpdated</dd>
            <dt class="col-sm-2">CreatedBy</dt>
            <dd class="col-sm-10">@transport.CreatedBy</dd>
            <dt class="col-sm-2">UpdatedBy</dt>
            <dd class="col-sm-10">@transport.UpdatedBy</dd>
        </dl>
        <div>
            <a href="@($"/transports/edit?transportid={transport.TransportId}")">Edit</a> |
            <a href="@($"/transports")">Back to List</a>
        </div>
    }
</div>

@code {
    private Transport? transport;

    [SupplyParameterFromQuery]
    private int TransportId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        transport = await context.Transport.FirstOrDefaultAsync(m => m.TransportId == TransportId);

        if (transport is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
