@page "/transports/edit"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Transport</h2>
<hr />
@if (Transport is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Transport" OnValidSubmit="UpdateTransport" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Transport.TransportId" value="@Transport.TransportId" />
                <div class="mb-3">
                    <label for="transportname" class="form-label">TransportName:</label>
                    <InputText id="transportname" @bind-Value="Transport.TransportName" class="form-control" />
                    <ValidationMessage For="() => Transport.TransportName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="transportduration" class="form-label">TransportDuration:</label>
                    <InputText id="transportduration" @bind-Value="Transport.TransportDuration" class="form-control" />
                    <ValidationMessage For="() => Transport.TransportDuration" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="transportdeparturetime" class="form-label">TransportDepartureTime:</label>
                    <InputDate id="transportdeparturetime" @bind-Value="Transport.TransportDepartureTime" class="form-control" />
                    <ValidationMessage For="() => Transport.TransportDepartureTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="transportarrivaltime" class="form-label">TransportArrivalTime:</label>
                    <InputDate id="transportarrivaltime" @bind-Value="Transport.TransportArrivalTime" class="form-control" />
                    <ValidationMessage For="() => Transport.TransportArrivalTime" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="itinerarydetailid" class="form-label">ItineraryDetailId:</label>
                    <InputNumber id="itinerarydetailid" @bind-Value="Transport.ItineraryDetailId" class="form-control" />
                    <ValidationMessage For="() => Transport.ItineraryDetailId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Transport.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Transport.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Transport.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Transport.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Transport.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Transport.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Transport.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Transport.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/transports">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int TransportId { get; set; }

    [SupplyParameterFromForm]
    private Transport? Transport { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Transport ??= await context.Transport.FirstOrDefaultAsync(m => m.TransportId == TransportId);

        if (Transport is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateTransport()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Transport!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!TransportExists(Transport!.TransportId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/transports");
    }

    private bool TransportExists(int transportid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Transport.Any(e => e.TransportId == transportid);
    }
}
