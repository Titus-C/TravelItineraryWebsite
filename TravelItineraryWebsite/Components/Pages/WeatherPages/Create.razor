@page "/weathers/create"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Weather</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Weather" OnValidSubmit="AddWeather" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="weathername" class="form-label">WeatherName:</label> 
                <InputText id="weathername" @bind-Value="Weather.WeatherName" class="form-control" /> 
                <ValidationMessage For="() => Weather.WeatherName" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="weatherforecast" class="form-label">WeatherForecast:</label> 
                <InputText id="weatherforecast" @bind-Value="Weather.WeatherForecast" class="form-control" /> 
                <ValidationMessage For="() => Weather.WeatherForecast" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="weatherdescription" class="form-label">WeatherDescription:</label> 
                <InputText id="weatherdescription" @bind-Value="Weather.WeatherDescription" class="form-control" /> 
                <ValidationMessage For="() => Weather.WeatherDescription" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="destinationid" class="form-label">DestinationId:</label> 
                <InputNumber id="destinationid" @bind-Value="Weather.DestinationId" class="form-control" /> 
                <ValidationMessage For="() => Weather.DestinationId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="locationid" class="form-label">LocationId:</label> 
                <InputNumber id="locationid" @bind-Value="Weather.LocationId" class="form-control" /> 
                <ValidationMessage For="() => Weather.LocationId" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="datecreated" class="form-label">DateCreated:</label> 
                <InputDate id="datecreated" @bind-Value="Weather.DateCreated" class="form-control" /> 
                <ValidationMessage For="() => Weather.DateCreated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="dateupdated" class="form-label">DateUpdated:</label> 
                <InputDate id="dateupdated" @bind-Value="Weather.DateUpdated" class="form-control" /> 
                <ValidationMessage For="() => Weather.DateUpdated" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="createdby" class="form-label">CreatedBy:</label> 
                <InputText id="createdby" @bind-Value="Weather.CreatedBy" class="form-control" /> 
                <ValidationMessage For="() => Weather.CreatedBy" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="updatedby" class="form-label">UpdatedBy:</label> 
                <InputText id="updatedby" @bind-Value="Weather.UpdatedBy" class="form-control" /> 
                <ValidationMessage For="() => Weather.UpdatedBy" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/weathers">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Weather Weather { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddWeather()
    {
        using var context = DbFactory.CreateDbContext();
        context.Weather.Add(Weather);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/weathers");
    }
}
