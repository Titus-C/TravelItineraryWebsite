@page "/weathers/edit"
@using Microsoft.EntityFrameworkCore
@using TravelItineraryWebsite.Domain
@inject IDbContextFactory<TravelItineraryWebsite.Data.TravelItineraryWebsiteContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Weather</h2>
<hr />
@if (Weather is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Weather" OnValidSubmit="UpdateWeather" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Weather.WeatherId" value="@Weather.WeatherId" />
                <div class="mb-3">
                    <label for="weathername" class="form-label">WeatherName:</label>
                    <InputText id="weathername" @bind-Value="Weather.WeatherName" class="form-control" />
                    <ValidationMessage For="() => Weather.WeatherName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weatherforecast" class="form-label">WeatherForecast:</label>
                    <InputText id="weatherforecast" @bind-Value="Weather.WeatherForecast" class="form-control" />
                    <ValidationMessage For="() => Weather.WeatherForecast" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="weatherdescription" class="form-label">WeatherDescription:</label>
                    <InputText id="weatherdescription" @bind-Value="Weather.WeatherDescription" class="form-control" />
                    <ValidationMessage For="() => Weather.WeatherDescription" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="destinationid" class="form-label">DestinationId:</label>
                    <InputNumber id="destinationid" @bind-Value="Weather.DestinationId" class="form-control" />
                    <ValidationMessage For="() => Weather.DestinationId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="locationid" class="form-label">LocationId:</label>
                    <InputNumber id="locationid" @bind-Value="Weather.LocationId" class="form-control" />
                    <ValidationMessage For="() => Weather.LocationId" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="datecreated" class="form-label">DateCreated:</label>
                    <InputDate id="datecreated" @bind-Value="Weather.DateCreated" class="form-control" />
                    <ValidationMessage For="() => Weather.DateCreated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="dateupdated" class="form-label">DateUpdated:</label>
                    <InputDate id="dateupdated" @bind-Value="Weather.DateUpdated" class="form-control" />
                    <ValidationMessage For="() => Weather.DateUpdated" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="createdby" class="form-label">CreatedBy:</label>
                    <InputText id="createdby" @bind-Value="Weather.CreatedBy" class="form-control" />
                    <ValidationMessage For="() => Weather.CreatedBy" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="updatedby" class="form-label">UpdatedBy:</label>
                    <InputText id="updatedby" @bind-Value="Weather.UpdatedBy" class="form-control" />
                    <ValidationMessage For="() => Weather.UpdatedBy" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/weathers">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int WeatherId { get; set; }

    [SupplyParameterFromForm]
    private Weather? Weather { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Weather ??= await context.Weather.FirstOrDefaultAsync(m => m.WeatherId == WeatherId);

        if (Weather is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateWeather()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Weather!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!WeatherExists(Weather!.WeatherId))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/weathers");
    }

    private bool WeatherExists(int weatherid)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Weather.Any(e => e.WeatherId == weatherid);
    }
}
